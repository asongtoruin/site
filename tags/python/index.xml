<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on ruszkow.ski</title>
    <link>https://ruszkow.ski/tags/python/</link>
    <description>Recent content in Python on ruszkow.ski</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <lastBuildDate>Tue, 17 Nov 2020 21:50:05 +0000</lastBuildDate><atom:link href="https://ruszkow.ski/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dance, Dancier, Danciest</title>
      <link>https://ruszkow.ski/posts/2020-11-17-dance-dancier-danciest/</link>
      <pubDate>Tue, 17 Nov 2020 21:50:05 +0000</pubDate>
      
      <guid>https://ruszkow.ski/posts/2020-11-17-dance-dancier-danciest/</guid>
      <description>Back in the heady days of 2008, Oxford&amp;rsquo;s finest math-rock band TTNG (back then still known as This Town Needs Guns) opened their self-titled release with a (fantastic) song providing a rather curious declaration - 26 Is Dancier Than 4.
Jump forward 12 years to 2020, and I&amp;rsquo;ve been digging around a bit in the Spotify API to better understand what data it provides and try to find some fun things to plot.</description>
    </item>
    
    <item>
      <title>Albums to Ruin: database operations</title>
      <link>https://ruszkow.ski/posts/2020-04-20-albums-to-ruin-database-operations/</link>
      <pubDate>Mon, 20 Apr 2020 10:30:00 +0100</pubDate>
      
      <guid>https://ruszkow.ski/posts/2020-04-20-albums-to-ruin-database-operations/</guid>
      <description>Introduction This post is a continuation of the development of my Albums to Ruin Twitter bot. This is the first part of actual development of the bot - information on the concept and outline can be found in the Initial Concept post.
In this post, I&amp;rsquo;m going to cover the database operations required to power the Twitter bot and keep track of what has already been posted and the queue of albums to post.</description>
    </item>
    
    <item>
      <title>Albums to Ruin: working with the Spotify API</title>
      <link>https://ruszkow.ski/posts/2020-04-17-albums-to-ruin-working-with-the-spotify-api/</link>
      <pubDate>Fri, 17 Apr 2020 11:30:00 +0100</pubDate>
      
      <guid>https://ruszkow.ski/posts/2020-04-17-albums-to-ruin-working-with-the-spotify-api/</guid>
      <description>Introduction This post is a continuation of the development of my Albums to Ruin Twitter bot. This is the first part of actual development of the bot - information on the concept and outline can be found in the Initial Concept post.
In this post, I&amp;rsquo;m going to cover the process required for getting the recently played tracks from Spotify and the URL for the album art.
Getting Started First of all, we need to register an application with Spotify.</description>
    </item>
    
    <item>
      <title>Travis &#43; PyInstaller &#43; GitHub Releases</title>
      <link>https://ruszkow.ski/posts/2019-10-21-travis-&#43;-pyinstaller-&#43;-github-releases/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ruszkow.ski/posts/2019-10-21-travis-&#43;-pyinstaller-&#43;-github-releases/</guid>
      <description>Part of one of the projects I&amp;rsquo;ve been working on in my day job recently has involved taking over the development of a tool that implements some simple data anonymisation. This includes the deployment of an executable that can be used by non-technical staff, who will likely be the main users of the tool. It&amp;rsquo;s also highly likely that all of those staff will be working on Windows PCs. As the executable is created through PyInstaller, this means the executable needs to be built in a Windows environment.</description>
    </item>
    
  </channel>
</rss>
